% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots.R
\name{colourscale}
\alias{colourscale}
\alias{colourscale.factor}
\alias{colourscale.character}
\alias{colourscale.numeric}
\alias{colourscale.default}
\title{colorscale}
\usage{
\method{colourscale}{factor}(factor, col = NULL, colours = NULL,
  colors = NULL)

\method{colourscale}{character}(character, col = NULL, colours = NULL,
  colors = NULL)

\method{colourscale}{numeric}(vector, col = NULL, colours = NULL,
  colors = NULL)

\method{colourscale}{default}(n, col = NULL, colours = NULL,
  colors = NULL)
}
\arguments{
\item{n}{number of colours to generate (integer or numeric)}

\item{col}{= NULL,colour,color scale of colours to interpolate}
}
\description{
generate a colour scale for plotting scales with a variable number states.
}
\examples{

# generate colour scale
library("RColorBrewer")
colours <- brewer.pal(11, "Set3")
n <- 3
scale <- colourscale(n, colours)
# example plot
x_mean <- rnorm(n, 1000, 500)
y_mean <- rnorm(n, 1000, 500)
x_vals <- sapply(x_mean, function(x) rnorm(100, x, 50))
y_vals <- sapply(y_mean, function(y) rnorm(100, y, 50))
plot(x_vals, y_vals, col = scale[unlist(lapply(1:n, function(x) rep(x, 100)))], pch = 20)
legend("topleft", legend = 1:n, col = scale, pch = 20)

# generate colour scale
library("RColorBrewer")
colours <- brewer.pal(11, "Set3")
n <- 15
scale <- colourscale(n, colours)
# example plot
x_mean <- rnorm(n, 1000, 500)
y_mean <- rnorm(n, 1000, 500)
x_vals <- sapply(x_mean, function(x) rnorm(100, x, 50))
y_vals <- sapply(y_mean, function(y) rnorm(100, y, 50))
plot(x_vals, y_vals, col = scale[unlist(lapply(1:n, function(x) rep(x, 100)))], pch = 20)
legend("topleft", legend = 1:n, col = scale, pch = 20)

}
\keyword{color}
\keyword{colour}
\keyword{graphics}
\keyword{plot}
